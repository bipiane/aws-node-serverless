org: ipianetti
app: aws-node-serverless
service: aws-node-serverless
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: sa-east-1 #SÃ£o Paulo
  environment:
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:Get*"
            - "dynamodb:Scan*"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_CUSTOMER_TABLE}

functions:
  api:
    handler: src/index.handler
    reservedConcurrency: 1
    events:
      - httpApi:
          path: /
          method: get
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
  createCustomer:
    handler: src/handler.createCustomer
    description: Creates a new customer
    reservedConcurrency: 3
    events:
      - httpApi:
          path: /api/v1/customers
          method: post
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
  getCustomers:
    handler: src/handler.getAllCustomer
    description: Gets all customers
    reservedConcurrency: 3
    events:
      - httpApi:
          path: /api/v1/customers
          method: get
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
  deleteCustomer:
    handler: src/handler.deleteCustomer
    description: Disables a customer by email
    reservedConcurrency: 3
    events:
      - httpApi:
          path: /api/v1/customers/{email}
          method: delete
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live

resources:
  Resources:
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        TableName: ${self:provider.environment.DYNAMODB_CUSTOMER_TABLE}

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb
  - serverless-plugin-canary-deployments

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      noStart: true
