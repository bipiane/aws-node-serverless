org: ipianetti
app: aws-node-serverless
service: aws-node-serverless
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: sa-east-1 #SÃ£o Paulo
  environment:
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}
    USER_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:Get*"
            - "dynamodb:Query"
            - "dynamodb:Scan*"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_CUSTOMER_TABLE}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_CUSTOMER_TABLE}/index/*
        - Effect: "Allow"
          Action:
            - "cognito-idp:AdminInitiateAuth"
            - "cognito-idp:AdminCreateUser"
            - "cognito-idp:AdminSetUserPassword"
          Resource: !GetAtt UserPool.Arn

functions:
  api:
    handler: src/index.handler
    reservedConcurrency: 1
    events:
      - http:
          path: /
          method: get
          cors: true
  loginUser:
    handler: src/handler.login
    description: Login User
    reservedConcurrency: 3
    events:
      - http:
          path: /user/login
          method: post
          cors: true
  signupUser:
    handler: src/handler.signup
    description: Signup User
    reservedConcurrency: 3
    events:
      - http:
          path: /user/signup
          method: post
          cors: true
  createCustomer:
    handler: src/handler.createCustomer
    description: Creates a new customer
    reservedConcurrency: 3
    events:
      - http:
          path: /api/v1/customers
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
            claims:
              - email
    alarms:
      - FunctionErrors
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
      alarms:
        - CreateCustomerFunctionErrorsAlarm
  getCustomer:
    handler: src/handler.getCustomer
    description: Gets a customer by uuid
    reservedConcurrency: 3
    events:
      - http:
          path: /api/v1/customers/{uuid}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
            claims:
              - email
    alarms:
      - FunctionErrors
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
      alarms:
        - GetCustomerFunctionErrorsAlarm
  getCustomers:
    handler: src/handler.getAllCustomers
    description: Gets all customers
    reservedConcurrency: 3
    events:
      - http:
          path: /api/v1/customers
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
            claims:
              - email
    alarms:
      - FunctionErrors
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
      alarms:
        - GetCustomersFunctionErrorsAlarm
  deleteCustomer:
    handler: src/handler.deleteCustomer
    description: Disables a customer by uuid
    reservedConcurrency: 3
    events:
      - http:
          path: /api/v1/customers/{uuid}
          method: delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
            claims:
              - email
    alarms:
      - FunctionErrors
    deploymentSettings:
      type: Canary10Percent5Minutes
      alias: Live
      alarms:
        - DeleteCustomerFunctionErrorsAlarm

resources:
  Resources:
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_CUSTOMER_TABLE}
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH   # partition key
        GlobalSecondaryIndexes:
          - IndexName: usernameIndex
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: emailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: [ "email" ]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb
  - serverless-plugin-canary-deployments
  - serverless-plugin-aws-alerts

custom:
  alerts:
    dashboards: true
    definitions:
      FunctionErrors:
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      noStart: true
